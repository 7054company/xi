import { query } from '../../../config/database.js';
import { v4 as uuidv4 } from 'uuid';

export const MarketplaceModel = {
  // Create a new product
  async create({ name, description, type, price, category, tags, visibility, documentation, apiEndpoint, userId }) {
    const id = uuidv4();
    const sql = `
      INSERT INTO marketplace_products (
        id, name, description, type, price, category, tags, visibility,
        documentation, api_endpoint, user_id, created_at, updated_at
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW())
    `;
    
    await query(sql, [
      id, name, description, type, price, category,
      JSON.stringify(tags), visibility, documentation, apiEndpoint, userId
    ]);
    return id;
  },

  // Get all public products
  async getPublicProducts() {
    const sql = `
      SELECT 
        p.*,
        u.username as author_name,
        (SELECT COUNT(*) FROM product_downloads WHERE product_id = p.id) as download_count
      FROM marketplace_products p
      JOIN users u ON p.user_id = u.id
      WHERE p.visibility = 'public' AND p.status = 'published'
      ORDER BY p.created_at DESC
    `;
    
    return await query(sql);
  },

  // Get user's products
  async getUserProducts(userId) {
    const sql = `
      SELECT 
        p.*,
        u.username as author_name,
        (SELECT COUNT(*) FROM product_downloads WHERE product_id = p.id) as download_count
      FROM marketplace_products p
      JOIN users u ON p.user_id = u.id
      WHERE p.user_id = ?
      ORDER BY p.created_at DESC
    `;
    
    return await query(sql, [userId]);
  },

  // Get single product
  async getById(id) {
    const sql = `
      SELECT 
        p.*,
        u.username as author_name,
        (SELECT COUNT(*) FROM product_downloads WHERE product_id = p.id) as download_count
      FROM marketplace_products p
      JOIN users u ON p.user_id = u.id
      WHERE p.id = ?
    `;
    
    const [product] = await query(sql, [id]);
    return product || null;
  },

  // Update product
  async update(id, updates) {
    const allowedFields = [
      'name', 'description', 'type', 'price', 'category',
      'tags', 'visibility', 'status', 'documentation', 'api_endpoint'
    ];
    
    const updateFields = [];
    const values = [];

    for (const [key, value] of Object.entries(updates)) {
      if (allowedFields.includes(key)) {
        updateFields.push(`${key} = ?`);
        values.push(key === 'tags' ? JSON.stringify(value) : value);
      }
    }

    if (updateFields.length === 0) return false;

    updateFields.push('updated_at = NOW()');
    values.push(id);

    const sql = `
      UPDATE marketplace_products 
      SET ${updateFields.join(', ')}
      WHERE id = ?
    `;

    await query(sql, values);
    return true;
  },

  // Delete product
  async delete(id) {
    const sql = 'DELETE FROM marketplace_products WHERE id = ?';
    await query(sql, [id]);
  }
};

export default MarketplaceModel;